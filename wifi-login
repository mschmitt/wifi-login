#!/bin/bash

UNAME_S=$(uname -s)
TESTURL='http://detectportal.firefox.com/success.txt'
CONFDIR="$(dirname $0)/$(basename $0).conf.d"

function out {
	if test -t 0
	then
		echo "$1"
	else
		osascript -e "display notification \"$1\" with title \"Wifi Login\""
	fi
}

function test_mozilla {
	curl --connect-timeout 5 --silent http://detectportal.firefox.com/success.txt 2>&1 | 
		head -n1 | grep -q "success" && out "Internet is accessible."
}

function debug {
	if [[ $DEBUG ]]
	then
		echo "$1"
	fi
}

function kill_portallogin {
	case "$UNAME_S" in
		"Darwin")
			pkill "Captive Network Assistant"
			;;
	esac
}

if ! test_mozilla
then
	TEMPFILE=$(mktemp)
	debug "Tempfile is $TEMPFILE"
	curl --silent --location --connect-timeout 5 http://detectportal.firefox.com/success.txt > $TEMPFILE
	debug "$(cat $TEMPFILE)"

	# Detect type of portal based on HTML output
	for DETECTOR in $(ls "$CONFDIR"/*.detector)
	do
		debug "Trying: $DETECTOR"
		. $DETECTOR 
		PORTAL_TYPE=$(detect_portal "$TEMPFILE")
		if [ $? -eq 0 ]
		then
			break
		fi
	done
	rm $TEMPFILE

	# source the matching include
	if [[ ! $PORTAL_TYPE ]]
	then
		out "Unknown Portal."
	elif [[ -s "$CONFDIR/$PORTAL_TYPE.conf" ]]
	then
		. "$CONFDIR/$PORTAL_TYPE.conf"
		if [[ $ANONYMOUS ]]
		then
			kill_portallogin
			do_login
		else
			if [[ -s "$CONFDIR/$PORTAL_TYPE.auth" ]]
			then
				kill_portallogin
				out "Logging in to: $PORTAL_TYPE"
				do_login "$CONFDIR/$PORTAL_TYPE.auth"
			else
				out "$PORTAL_TYPE: No authentication available."
				continue
			fi
		fi
	else
		out "$PORTAL_TYPE: Detected, but no configuration available."
	fi
fi
